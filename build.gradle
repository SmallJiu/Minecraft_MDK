import org.apache.commons.io.FileUtils
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven {
            name = 'MinecraftForge'
            url = 'https://maven.minecraftforge.net/'
        }
		maven {
			url = 'https://maven.parchmentmc.org'
            name = 'ParchmentMC'
		}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc.librarian.forgegradle', name: 'org.parchmentmc.librarian.forgegradle.gradle.plugin', version: '1.2.+', changing: true
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = project.mod_version
group = project.mod_group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.mod_name

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: project.mapping_channel, version: project.mapping_version

    accessTransformer = file('src/main/resources/META-INF/'+at_file) // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file(project.client_dir)

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', '${mod_id}'

            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file(project.server_dir)

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', '${mod_id}'

            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file(project.gameTestServer_dir)

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', '${mod_id}'

            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file(project.data_dir)

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', '${mod_id}', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:' + project.minecraft_version + '-' + project.forge_version

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
File archiveFile1
tasks.named('jar', Jar).configure {
    Date date = new Date()
    manifest {
        attributes([
        "Specification-Title"     : project.mod_id,
        "Specification-Vendor"    : project.mod_authors,
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   : project.mod_authors,
                'Implementation-Timestamp': date.format("yyyy/MM/dd_HH:mm:ss")
        ])
    }
    finalizedBy 'reobfJar'

    String date1 = "_" + date.format("HH.mm.ss")
    String name = archiveFileName.get()

    name = name.substring(0, name.lastIndexOf('.')) + date1

    archiveFileName.set(name + ".jar")

    doLast {
        archiveFile1 = archiveFile.get().getAsFile()
    }
}

build {
    doLast {
        File root = archiveFile1.getParentFile().getParentFile().getParentFile()
        File tempDir = new File(root, "build/tmp/source/")
        String name = archiveFile1.getName().substring(0, archiveFile1.getName().lastIndexOf('.'))
        File sourceJar = new File(archiveFile1.getParent(), name + "-source.jar")
        println()
        println("file name: " + archiveFile1.getName())
        println("source name: " + name + "-source.jar")
        if (tempDir.exists()) {
            tempDir.delete()
        }
        copy(new File(root, "build/resources/main"), tempDir)
        FileUtils.copyFile(new File(root, "build/tmp/jar/MANIFEST.MF"), new File(tempDir, "META-INF/MANIFEST.MF"))
        copy(new File(root, "src/main/java"), tempDir)

        try(ZipOutputStream os = new ZipOutputStream(new FileOutputStream(sourceJar))) {
            for (File f : tempDir.listFiles()) {
                zip(os, f)
            }
        }
    }
}

static void copy(File src, File to) {
    for (File c : src.listFiles()) {
        if (c.isFile()) {
            FileUtils.copyFile(c, new File(to, c.getName()))
        }else {
            copy(c, new File(to, c.getName()))
        }
    }
}
static void zip(ZipOutputStream os, File f) {
    if (f.isFile()) {
        String s = f.toString().replace('\\', '/')
        os.putNextEntry(new ZipEntry(s.substring(s.indexOf("/build/tmp/source/") + "/build/tmp/source/".length())))
        os.write(f.bytes)
        os.closeEntry()
    }else {
        for (File f1 : f.listFiles()) {
            zip(os, f1)
        }
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources {
    inputs.properties([
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,

            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,

            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description
    ])
	
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand([
                minecraft_version: minecraft_version,
                minecraft_version_range: minecraft_version_range,

                forge_version: forge_version,
                forge_version_range: forge_version_range,
                loader_version_range: loader_version_range,

                mod_id: mod_id,
                mod_name: mod_name,
                mod_license: mod_license,
                mod_version: mod_version,
                mod_authors: mod_authors,
                mod_description: mod_description
        ])
    }
}
