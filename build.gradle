import org.apache.commons.io.FileUtils
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = mod_group_id
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'official', version: '1.16.5'
	mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/'+at_file)

    runs {
        client {
            workingDirectory project.file(client_dir)
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property '--username', run_user
            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file(server_dir)
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--nogui'
            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file(data_dir)
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                '${mod_id}' {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version
}

File archiveFile1
tasks.named('jar', Jar).configure {
    Date date = new Date()
    manifest {
        attributes([
            "FMLAT": at_file,
            "Specification-Title": mod_name,
            "Specification-Vendor": mod_authors,
            "Specification-Version": 1,
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" : mod_authors,
            "Implementation-Timestamp": date.format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'

    String date1 = "_" + date.format("HH.mm.ss")
    String name = archiveFileName.get()

    name = name.substring(0, name.lastIndexOf('.')) + date1

    archiveFileName.set(name + ".jar")

    doLast {
        archiveFile1 = archiveFile.get().getAsFile()
    }
}

build {
    doLast {
        File root = archiveFile1.getParentFile().getParentFile().getParentFile()
        File tempDir = new File(root, "build/tmp/source/")
        String name = archiveFile1.getName().substring(0, archiveFile1.getName().lastIndexOf('.'))
        File sourceJar = new File(archiveFile1.getParent(), name + "-source.jar")
        println()
        println("file name: " + archiveFile1.getName())
        println("source name: " + name + "-source.jar")
        if (tempDir.exists()) {
            tempDir.delete()
        }
        copy(new File(root, "build/resources/main"), tempDir)
        FileUtils.copyFile(new File(root, "build/tmp/jar/MANIFEST.MF"), new File(tempDir, "META-INF/MANIFEST.MF"))
        copy(new File(root, "src/main/java"), tempDir)

        try(ZipOutputStream os = new ZipOutputStream(new FileOutputStream(sourceJar))) {
            for (File f : tempDir.listFiles()) {
                zip(os, f)
            }
        }
    }
}

static void copy(File src, File to) {
    for (File c : src.listFiles()) {
        if (c.isFile()) {
            FileUtils.copyFile(c, new File(to, c.getName()))
        }else {
            copy(c, new File(to, c.getName()))
        }
    }
}
static void zip(ZipOutputStream os, File f) {
    if (f.isFile()) {
        String s = f.toString().replace('\\', '/')
        os.putNextEntry(new ZipEntry(s.substring(s.indexOf("/build/tmp/source/") + "/build/tmp/source/".length())))
        os.write(f.bytes)
        os.closeEntry()
    }else {
        for (File f1 : f.listFiles()) {
            zip(os, f1)
        }
    }
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
