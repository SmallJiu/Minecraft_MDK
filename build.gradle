import org.apache.commons.io.FileUtils
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.2.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_name
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'official', version: '1.20.1'
    mappings channel: mapping_channel, version: mapping_version
    enableEclipsePrepareRuns = false
    enableIdeaPrepareRuns = false

    copyIdeResources = true
    // generateRunFolders = true
    accessTransformer = file('src/main/resources/META-INF/' + at_file)

    runs {
        configureEach {
            workingDirectory project.file(workingDirectory)
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file(client_dir)
            property 'forge.enabledGameTestNamespaces', mod_id
            args '-username', run_user
        }

        server {
            workingDirectory project.file(server_dir)
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            workingDirectory project.file(gameTestServer_dir)
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file(data_dir)
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://maven.parchmentmc.org' }
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}


File archiveFile1
tasks.named('jar', Jar).configure {
    Date date = new Date()
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : 1,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': date.format("yyyy/MM/dd_HH:mm:ss")
        ])
    }
    finalizedBy 'reobfJar'

    String date1 = "_" + date.format("HH.mm.ss")
    String name = archiveFileName.get()

    name = name.substring(0, name.lastIndexOf('.')) + date1

    archiveFileName.set(name + ".jar")

    doLast {
        archiveFile1 = archiveFile.get().getAsFile()
    }
}

build {
    doLast {
        File root = archiveFile1.getParentFile().getParentFile().getParentFile()
        File tempDir = new File(root, "build/tmp/source/")
        String name = archiveFile1.getName().substring(0, archiveFile1.getName().lastIndexOf('.'))
        File sourceJar = new File(archiveFile1.getParent(), name + "-source.jar")
        println()
        println("file name: " + archiveFile1.getName())
        println("source name: " + name + "-source.jar")
        if (tempDir.exists()) {
            tempDir.delete()
        }
        copy(new File(root, "build/resources/main"), tempDir)
        FileUtils.copyFile(new File(root, "build/tmp/jar/MANIFEST.MF"), new File(tempDir, "META-INF/MANIFEST.MF"))
        copy(new File(root, "src/main/java"), tempDir)

        try(ZipOutputStream os = new ZipOutputStream(new FileOutputStream(sourceJar))) {
            for (File f : tempDir.listFiles()) {
                zip(os, f)
            }
        }
    }
}

static void copy(File src, File to) {
    for (File c : src.listFiles()) {
        if (c.isFile()) {
            FileUtils.copyFile(c, new File(to, c.getName()))
        }else {
            copy(c, new File(to, c.getName()))
        }
    }
}
static void zip(ZipOutputStream os, File f) {
    if (f.isFile()) {
        String s = f.toString().replace('\\', '/')
        os.putNextEntry(new ZipEntry(s.substring(s.indexOf("/build/tmp/source/") + "/build/tmp/source/".length())))
        os.write(f.bytes)
        os.closeEntry()
    }else {
        for (File f1 : f.listFiles()) {
            zip(os, f1)
        }
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
